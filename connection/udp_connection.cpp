//
// Created by RGAA on 8/12/2024.
//

#include "udp_connection.h"
#include "tc_common_new/log.h"
#include <asio2/asio2.hpp>
#include <asio2/udp/udp_client.hpp>

namespace tc
{

    struct UdpMessagePack {
        uint32_t magic_ = 0;
        uint32_t length_ = 0;
        // data below...
    };

    UdpConnection::UdpConnection(const std::string &host, int port) {
        this->host_ = host;
        this->port_ = port;
    }

    void UdpConnection::Start() {
        udp_client_ = std::make_shared<asio2::udp_client>();
        // Provide a kcp conv, If the conv is not provided, it will be generated by the server.
        udp_client_->set_kcp_conv(12);

        udp_client_->bind_connect([&]() {
            if (asio2::get_last_error())
                LOGI("udp connect failure : {} {}", asio2::last_error_val(), asio2::last_error_msg().c_str());
            else {
                LOGI("udp connect success : {} {}", udp_client_->local_address().c_str(), udp_client_->local_port());
                udp_client_->post_queued_event([this]() {
                    if (conn_cbk_) {
                        conn_cbk_();
                    }
                });
            }

        }).bind_disconnect([this]() {
            LOGI("disconnect : {} {}", asio2::last_error_val(), asio2::last_error_msg().c_str());
            if (dis_conn_cbk_) {
                dis_conn_cbk_();
            }

        }).bind_recv([&](std::string_view data) {
            if (msg_cbk_) {
                std::string cpy_data(data.data(), data.size());
                //LOGI("udp data size: {} bytes", cpy_data.size());
                msg_cbk_(std::move(cpy_data));
            }

        }).bind_handshake([&]() {
            if (asio2::get_last_error())
                LOGI("handshake failure : {} {}",
                       asio2::last_error_val(), asio2::last_error_msg().c_str());
            else
                LOGI("handshake success : {} {}",
                       asio2::last_error_val(), asio2::last_error_msg().c_str());
        }).bind_init([&]() {
            // Specify the local port to which the socket is bind.
            //asio::ip::udp::endpoint ep(asio::ip::udp::v4(), 1234);
            //client.socket().bind(ep);
        });

        // to use kcp, the last param must be : asio2::use_kcp
        udp_client_->async_start(host_, port_, asio2::use_kcp);
    }

    void UdpConnection::Stop() {
        if (udp_client_ && udp_client_->is_started()) {
            udp_client_->stop_all_timers();
            udp_client_->stop();
        }
    }

    void UdpConnection::PostBinaryMessage(const std::string& msg) {
        if (udp_client_ && udp_client_->is_started()) {
            queued_msg_count_++;
            udp_client_->async_send(msg, [this]() {
                queued_msg_count_--;
            });
        }
    }

}